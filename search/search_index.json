{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview This is an official documentation for Dansebox 's modding API created using MkDocs . This website is hosted through GitHub pages and you can check it at https://antikoredev.github.io/dbdocs/ You're free to ask anything at Dansebox's official Discord Server . Note: This documentation is currently a stub, and it's still building. Modding API hasn't been released yet. There are many things not implemented, or implemented but not added here. Use this as a reference for future releases of the game. Getting Started Dansebox uses Lua as a programming language to support mods. You can start learning how to create your own mods at Getting Started page Example mod This is a very basic example mod you can use to try out the api: --[[ A simple mod that restarts a level if the player gets hit! --]] -- This runs when the mod has been enabled or when the game is opened while being enabled. function onLoad() console.log(\"One-hit Mod Enabled\"); end -- This runs when the mod has been disabled or the game is closed while being enabled. function onUnload() console.log(\"One-hit Mod Disabled\"); end -- This runs every frame the mod is enabled function onUpdate() if (not game.islevel()) then return end if (game.hit()) then game.restart(); end end Featured Mods A list of mods already made that should be featured. No mods added yet Contribute You can contribute Dansebox by donating through Ko-fi \u2615\u2728 You can contribute to this documentation by modifying and improving the markdown files for the pages.","title":"Overview"},{"location":"#overview","text":"This is an official documentation for Dansebox 's modding API created using MkDocs . This website is hosted through GitHub pages and you can check it at https://antikoredev.github.io/dbdocs/ You're free to ask anything at Dansebox's official Discord Server . Note: This documentation is currently a stub, and it's still building. Modding API hasn't been released yet. There are many things not implemented, or implemented but not added here. Use this as a reference for future releases of the game.","title":"Overview"},{"location":"#getting-started","text":"Dansebox uses Lua as a programming language to support mods. You can start learning how to create your own mods at Getting Started page","title":"Getting Started"},{"location":"#example-mod","text":"This is a very basic example mod you can use to try out the api: --[[ A simple mod that restarts a level if the player gets hit! --]] -- This runs when the mod has been enabled or when the game is opened while being enabled. function onLoad() console.log(\"One-hit Mod Enabled\"); end -- This runs when the mod has been disabled or the game is closed while being enabled. function onUnload() console.log(\"One-hit Mod Disabled\"); end -- This runs every frame the mod is enabled function onUpdate() if (not game.islevel()) then return end if (game.hit()) then game.restart(); end end","title":"Example mod"},{"location":"#featured-mods","text":"A list of mods already made that should be featured. No mods added yet","title":"Featured Mods"},{"location":"#contribute","text":"You can contribute Dansebox by donating through Ko-fi \u2615\u2728 You can contribute to this documentation by modifying and improving the markdown files for the pages.","title":"Contribute"},{"location":"extra/praxis/","text":"Good Practices in Modding There are a plenty of stuff you can do to improve your code's performance and readability. Resource Management You may need to add sprites, sounds, objects, etc. It's recommened to do all of these resource loading during the onLoad function. It's almost mandatory to save ID's received from these functions for later use, for this you can make tables for sprites, sounds, objects, and everything. After the mod has been disabled, you should free this memory up, by using resources.free(); on the onUnload function. sprites = {} sounds = {} objects = {} function onLoad() sprites = { superblock = resources.load(\"superblock.png\"); }; objects = { superblock = resources.add(\"superblock\", sprites.superblock, \"Super Block\", \"Awesome Items\", \"This block is so super that even superman can't withstand its presence\"); }; sound = { supersound = resources.load(\"supersound.ogg\"); }; end function onUnload() resources.free(); end","title":"Good Practices"},{"location":"extra/praxis/#good-practices-in-modding","text":"There are a plenty of stuff you can do to improve your code's performance and readability.","title":"Good Practices in Modding"},{"location":"extra/praxis/#resource-management","text":"You may need to add sprites, sounds, objects, etc. It's recommened to do all of these resource loading during the onLoad function. It's almost mandatory to save ID's received from these functions for later use, for this you can make tables for sprites, sounds, objects, and everything. After the mod has been disabled, you should free this memory up, by using resources.free(); on the onUnload function. sprites = {} sounds = {} objects = {} function onLoad() sprites = { superblock = resources.load(\"superblock.png\"); }; objects = { superblock = resources.add(\"superblock\", sprites.superblock, \"Super Block\", \"Awesome Items\", \"This block is so super that even superman can't withstand its presence\"); }; sound = { supersound = resources.load(\"supersound.ogg\"); }; end function onUnload() resources.free(); end","title":"Resource Management"},{"location":"getting_started/events/","text":"Events This is a reference of every event that Dansebox runs on your mod's main.lua file. For sake of simplicity, take in account that Dansebox shouldn't run any event on your mod if its disabled Note that you don't have to include any of these events for your mod to work, instead, just add those you actually need. onLoad This runs once the mod is enabled by the user, or when the game starts while the mod is enabled. Syntax: onLoad() Example: function onLoad() console.log(\"Enabled my incredible mod! Thanks :D\"); end This will show a log message when the mod is enabled :) onUnload This runs once the mod is disabled by the user, or when the game ends while the mod is enabled. Syntax: onUnload() Example: function onLoad() resources.free(); end This will free up resources added by the mod (This is a good practice actually!) onUpdate This will run every frame, this is useful when you want to check for buttons to do different actions. Note that this runs anywhere you are, including splash screens, editor, main menus, first load, etc. so you may (or may not) want to check where you are before doing an action. Syntax: onUpdate() Example: function onUpdate() if (not game.islevel()) then return end if (game.hit()) then game.restart(); end end This will restart the level, when the player is hit, only if the player is in a level. onLevelObjectUpdate This will run every frame for every object that is currently active in the level, while playing. This works both if you're on a replay or if you're in a level. The first parameter is an instance id you can use to manipulate the instance through the instance module Syntax: onLevelObjectUpdate(InstanceID instance) Example: function onLevelObjectUpdate(instance) if (instance.id(instance) == \"mymod:superblock\") then draw.sprite(sprite.superblock, instance.x(instance), instance.y(instance), instance.depth(instance)); end end This draws the superblock sprite if the instance id is mymod:superblock onEditorObjectUpdate This will run every frame for every object that is currently active in the level editor. The first parameter is an instance id you can use to manipulate the instance through the instance module Syntax: onEditorObjectUpdate(InstanceID instance) Example: function onEditorObjectUpdate(instance) if (instance.id(instance) == \"mymod:superblock\") then draw.sprite(sprite.superblock, instance.x(instance), instance.y(instance), instance.depth(instance)); end end This draws the superblock sprite if the instance id is mymod:superblock onPlayerCollide This will run every frame the player collides with something, for each instance colliding. The first parameter is an instance id you can use to manipulate the instance through the instance module Syntax: onPlayerCollide(InstanceID instance) Example: function onPlayerCollide(instance) if (instance.id(instance) == \"gunfires:ammo\") then instance.destroy(instance); ammo = ammo + 10; end end This will detect when the player collides with the object with id gunfires:ammo , if it does, it destroys it and adds 10 to the ammo variable. onLevelLoad This will run when a level is loaded. Works both for replays and levels. Syntax: onLevelLoad() Example: function onLevelLoad() attempts = 0; end This will detect when the level is loaded, and set the variable attempts to 0 onLevelPrepared This will run once the level is loaded, and after the level is restarted. Works both level and replays as well Syntax: onLevelPrepared() Example: function onLevelPrepared() attempts = attempts + 1; end This will detect when the level is prepared, and add 1 to the vriable attempts onLevelStarted This will run once the player has started the level, by pressing left or right (or any key that starts the level) the first time in a level after being loaded. Syntax: onLevelStarted() Example: function onLevelStarted() console.log(\"Level \" .. level.name() .. \" started! Here we go!\"); end This will send a debug message when you start a level, that includes the level name onLevelComplete This will run once the player has completed a level. Syntax: onLevelComplete() Example: function onLevelComplete() draw.hudtext(\"Congratulations!\", view.width() / 2, view.height() - 16, -1000, color.white, font.main); end This will congrat you by completing a level! onNetworkPacketReceive This will run when a packet is received during a multiplayer play. (This may not be implemented when you're reading this, so this event is probably, inexistent) Syntax: onNetworkPacketReceive(Table packetData) Example: No example defined. onEditorLoad This will run when the editor loads a level. Doesn't run if the editor is loaded plain empty. It gives you the filename of the level that has been loaded. Syntax: onEditorLoad(String filename) Example: function onEditorLoad(filename) local levelfile = level.fromfile(filename); local name = level.name(levelfile); end This will get the name of a level from it's file when it's loadaded. onEditorSave This will run when the editor saves a level. It gives you the filename of the level that has been saved. Syntax: onEditorSave(String filename) Example: No example defined. This will get the name of a level from it's file when it's loadaded. onEditorObjectPlace This will run everytime an object is created in the level editor. The first parameter corresponds to the instance of the new object Syntax: onEditorObjectPlace(InstanceID instance) Example: function onEditorObjectPlace(instance) if (instance.id(instance) == \"mymod:singleton\") then if (instance.number(\"mymod:singleton\") > 1) then instance.destroy(instance); end end end This will only let the player place 1 object of mymod:singleton onEditorObjectErase This will run everytime an object is erased in the level editor. The first parameter corresponds to the instance of the destroyec object Syntax: onEditorObjectPlace(InstanceID instance) Example: No example defined.","title":"Event Reference"},{"location":"getting_started/events/#events","text":"This is a reference of every event that Dansebox runs on your mod's main.lua file. For sake of simplicity, take in account that Dansebox shouldn't run any event on your mod if its disabled Note that you don't have to include any of these events for your mod to work, instead, just add those you actually need.","title":"Events"},{"location":"getting_started/events/#onload","text":"This runs once the mod is enabled by the user, or when the game starts while the mod is enabled. Syntax: onLoad() Example: function onLoad() console.log(\"Enabled my incredible mod! Thanks :D\"); end This will show a log message when the mod is enabled :)","title":"onLoad"},{"location":"getting_started/events/#onunload","text":"This runs once the mod is disabled by the user, or when the game ends while the mod is enabled. Syntax: onUnload() Example: function onLoad() resources.free(); end This will free up resources added by the mod (This is a good practice actually!)","title":"onUnload"},{"location":"getting_started/events/#onupdate","text":"This will run every frame, this is useful when you want to check for buttons to do different actions. Note that this runs anywhere you are, including splash screens, editor, main menus, first load, etc. so you may (or may not) want to check where you are before doing an action. Syntax: onUpdate() Example: function onUpdate() if (not game.islevel()) then return end if (game.hit()) then game.restart(); end end This will restart the level, when the player is hit, only if the player is in a level.","title":"onUpdate"},{"location":"getting_started/events/#onlevelobjectupdate","text":"This will run every frame for every object that is currently active in the level, while playing. This works both if you're on a replay or if you're in a level. The first parameter is an instance id you can use to manipulate the instance through the instance module Syntax: onLevelObjectUpdate(InstanceID instance) Example: function onLevelObjectUpdate(instance) if (instance.id(instance) == \"mymod:superblock\") then draw.sprite(sprite.superblock, instance.x(instance), instance.y(instance), instance.depth(instance)); end end This draws the superblock sprite if the instance id is mymod:superblock","title":"onLevelObjectUpdate"},{"location":"getting_started/events/#oneditorobjectupdate","text":"This will run every frame for every object that is currently active in the level editor. The first parameter is an instance id you can use to manipulate the instance through the instance module Syntax: onEditorObjectUpdate(InstanceID instance) Example: function onEditorObjectUpdate(instance) if (instance.id(instance) == \"mymod:superblock\") then draw.sprite(sprite.superblock, instance.x(instance), instance.y(instance), instance.depth(instance)); end end This draws the superblock sprite if the instance id is mymod:superblock","title":"onEditorObjectUpdate"},{"location":"getting_started/events/#onplayercollide","text":"This will run every frame the player collides with something, for each instance colliding. The first parameter is an instance id you can use to manipulate the instance through the instance module Syntax: onPlayerCollide(InstanceID instance) Example: function onPlayerCollide(instance) if (instance.id(instance) == \"gunfires:ammo\") then instance.destroy(instance); ammo = ammo + 10; end end This will detect when the player collides with the object with id gunfires:ammo , if it does, it destroys it and adds 10 to the ammo variable.","title":"onPlayerCollide"},{"location":"getting_started/events/#onlevelload","text":"This will run when a level is loaded. Works both for replays and levels. Syntax: onLevelLoad() Example: function onLevelLoad() attempts = 0; end This will detect when the level is loaded, and set the variable attempts to 0","title":"onLevelLoad"},{"location":"getting_started/events/#onlevelprepared","text":"This will run once the level is loaded, and after the level is restarted. Works both level and replays as well Syntax: onLevelPrepared() Example: function onLevelPrepared() attempts = attempts + 1; end This will detect when the level is prepared, and add 1 to the vriable attempts","title":"onLevelPrepared"},{"location":"getting_started/events/#onlevelstarted","text":"This will run once the player has started the level, by pressing left or right (or any key that starts the level) the first time in a level after being loaded. Syntax: onLevelStarted() Example: function onLevelStarted() console.log(\"Level \" .. level.name() .. \" started! Here we go!\"); end This will send a debug message when you start a level, that includes the level name","title":"onLevelStarted"},{"location":"getting_started/events/#onlevelcomplete","text":"This will run once the player has completed a level. Syntax: onLevelComplete() Example: function onLevelComplete() draw.hudtext(\"Congratulations!\", view.width() / 2, view.height() - 16, -1000, color.white, font.main); end This will congrat you by completing a level!","title":"onLevelComplete"},{"location":"getting_started/events/#onnetworkpacketreceive","text":"This will run when a packet is received during a multiplayer play. (This may not be implemented when you're reading this, so this event is probably, inexistent) Syntax: onNetworkPacketReceive(Table packetData) Example: No example defined.","title":"onNetworkPacketReceive"},{"location":"getting_started/events/#oneditorload","text":"This will run when the editor loads a level. Doesn't run if the editor is loaded plain empty. It gives you the filename of the level that has been loaded. Syntax: onEditorLoad(String filename) Example: function onEditorLoad(filename) local levelfile = level.fromfile(filename); local name = level.name(levelfile); end This will get the name of a level from it's file when it's loadaded.","title":"onEditorLoad"},{"location":"getting_started/events/#oneditorsave","text":"This will run when the editor saves a level. It gives you the filename of the level that has been saved. Syntax: onEditorSave(String filename) Example: No example defined. This will get the name of a level from it's file when it's loadaded.","title":"onEditorSave"},{"location":"getting_started/events/#oneditorobjectplace","text":"This will run everytime an object is created in the level editor. The first parameter corresponds to the instance of the new object Syntax: onEditorObjectPlace(InstanceID instance) Example: function onEditorObjectPlace(instance) if (instance.id(instance) == \"mymod:singleton\") then if (instance.number(\"mymod:singleton\") > 1) then instance.destroy(instance); end end end This will only let the player place 1 object of mymod:singleton","title":"onEditorObjectPlace"},{"location":"getting_started/events/#oneditorobjecterase","text":"This will run everytime an object is erased in the level editor. The first parameter corresponds to the instance of the destroyec object Syntax: onEditorObjectPlace(InstanceID instance) Example: No example defined.","title":"onEditorObjectErase"},{"location":"getting_started/finish/","text":"Finishing your mod","title":"Distribution"},{"location":"getting_started/finish/#finishing-your-mod","text":"","title":"Finishing your mod"},{"location":"getting_started/start/","text":"Creating your first mod project To start modding Dansebox, you'll need a simple template. You can download a premade one or continue with the following step Creating file structure If you don't have any template, you may create the file structure below, inside mods folder on your game's directory. <modname>/ content/ main.lua mod.conf mod.png Make sure you don't put <modname> to the root folder. content/ \u00b7 This is where all sprites and sounds will be stored, keep it as organized as you want. mod.png \u00b7 This is a preview image for the mod, this is optional and you can ignore it. mod.conf \u00b7 This is a file that set basic information about your mod. This is an important file we'll explain below main.lua \u00b7 This is where the real shit goes on, Dansebox will run this lua file in order to run your mod. Creating the mod.conf file This file holds information about your mod, such as mod name, mod description, version, author, etc. You should create this file for the mod to work. It interprets as an .ini file. The bare minimum you have to include to this file is something like this. [Mod] name=\"My cool mod\" description=\"This mod does all the things!\" version=\"1.0\" author=\"Me!\" namespace=\"mycoolmod\" You may want to change the name, and description to fit your needs. The most important thing that YOU MUST change is the namespace, which is the identifier for your mod, this should be unique and not repeated. For sake of simplicty, you should try to use the same namespace for the root folder name Basic main.lua syntax This is where the fun part goes, you start your mod by starting your game. (If it doesn't, check if it's enabled through settings menu) When the mod starts, it runs automatically the onLoad function inside your mod Here's a good example to start from function onLoad() console.log(\"Mod enabled\"); end function onUnload() console.log(\"Mod disabled\"); resources.free(); end When the mod is enabled, it will display in the console Mod enabled . When it disables, it will display Mod disabled and then free any resources added (If you don't import any sprites, sounds or objects, you shouldn't need any reesources.free(); function).","title":"Creating Project Files"},{"location":"getting_started/start/#creating-your-first-mod-project","text":"To start modding Dansebox, you'll need a simple template. You can download a premade one or continue with the following step","title":"Creating your first mod project"},{"location":"getting_started/start/#creating-file-structure","text":"If you don't have any template, you may create the file structure below, inside mods folder on your game's directory. <modname>/ content/ main.lua mod.conf mod.png Make sure you don't put <modname> to the root folder. content/ \u00b7 This is where all sprites and sounds will be stored, keep it as organized as you want. mod.png \u00b7 This is a preview image for the mod, this is optional and you can ignore it. mod.conf \u00b7 This is a file that set basic information about your mod. This is an important file we'll explain below main.lua \u00b7 This is where the real shit goes on, Dansebox will run this lua file in order to run your mod.","title":"Creating file structure"},{"location":"getting_started/start/#creating-the-modconf-file","text":"This file holds information about your mod, such as mod name, mod description, version, author, etc. You should create this file for the mod to work. It interprets as an .ini file. The bare minimum you have to include to this file is something like this. [Mod] name=\"My cool mod\" description=\"This mod does all the things!\" version=\"1.0\" author=\"Me!\" namespace=\"mycoolmod\" You may want to change the name, and description to fit your needs. The most important thing that YOU MUST change is the namespace, which is the identifier for your mod, this should be unique and not repeated. For sake of simplicty, you should try to use the same namespace for the root folder name","title":"Creating the mod.conf file"},{"location":"getting_started/start/#basic-mainlua-syntax","text":"This is where the fun part goes, you start your mod by starting your game. (If it doesn't, check if it's enabled through settings menu) When the mod starts, it runs automatically the onLoad function inside your mod Here's a good example to start from function onLoad() console.log(\"Mod enabled\"); end function onUnload() console.log(\"Mod disabled\"); resources.free(); end When the mod is enabled, it will display in the console Mod enabled . When it disables, it will display Mod disabled and then free any resources added (If you don't import any sprites, sounds or objects, you shouldn't need any reesources.free(); function).","title":"Basic main.lua syntax"},{"location":"home/lua/","text":"Lua Programming Language Lua is a lightweight, high-level, multi-paradigm programming language designed primarily for embedded use in applications.Lua is cross-platform, since the interpreter of compiled bytecode is written in ANSI C, and Lua has a relatively simple C API to embed it into applications. Source: Wikipedia Modding with Lua A lot of games use Lua as a modding API, it's a kinda fast language yet simple to use, and overall, very lightweight and for so it's very easy and cheap to implement it directly inside games and software. Lua is used by Dansebox to provide mod support. This documentation assumes you already know at least a bit of lua, or a bit of programming in general, but don't worry because you can learn easily Lua without having prior knowledge on programming or Lua itself as it's not a hard language, you only need some determination ;) At the moment of writting this, Dansebox uses Lua 5.4 to work with mods. More about Lua You can find information about Lua at their official website including its manual","title":"Lua"},{"location":"home/lua/#lua-programming-language","text":"Lua is a lightweight, high-level, multi-paradigm programming language designed primarily for embedded use in applications.Lua is cross-platform, since the interpreter of compiled bytecode is written in ANSI C, and Lua has a relatively simple C API to embed it into applications. Source: Wikipedia","title":"Lua Programming Language"},{"location":"home/lua/#modding-with-lua","text":"A lot of games use Lua as a modding API, it's a kinda fast language yet simple to use, and overall, very lightweight and for so it's very easy and cheap to implement it directly inside games and software. Lua is used by Dansebox to provide mod support. This documentation assumes you already know at least a bit of lua, or a bit of programming in general, but don't worry because you can learn easily Lua without having prior knowledge on programming or Lua itself as it's not a hard language, you only need some determination ;) At the moment of writting this, Dansebox uses Lua 5.4 to work with mods.","title":"Modding with Lua"},{"location":"home/lua/#more-about-lua","text":"You can find information about Lua at their official website including its manual","title":"More about Lua"},{"location":"reference/color/","text":"","title":"Color"},{"location":"reference/config/","text":"","title":"Config"},{"location":"reference/console/","text":"Console Module Allows the interaction with console and logs. log Output text to the console Syntax: console.log(String text); Returns: nil Example: function onLoad() console.log(\"Enabled my incredible mod! Thanks :D\"); end This will show a log message when the mod is enabled :) error Output text to the console as an error Syntax: console.error(String text); Returns: nil Example: No example defined. This will show a log message when the mod is enabled :) trace Output text to the console, and also to the latest.log file Syntax: console.trace(String text); Returns: nil Example: function onLoad() console.trace(\"Enabled my incredible mod! Thanks :D\"); end This will show and trace a log message when the mod is enabled :)","title":"Console"},{"location":"reference/console/#console-module","text":"Allows the interaction with console and logs.","title":"Console Module"},{"location":"reference/console/#log","text":"Output text to the console Syntax: console.log(String text); Returns: nil Example: function onLoad() console.log(\"Enabled my incredible mod! Thanks :D\"); end This will show a log message when the mod is enabled :)","title":"log"},{"location":"reference/console/#error","text":"Output text to the console as an error Syntax: console.error(String text); Returns: nil Example: No example defined. This will show a log message when the mod is enabled :)","title":"error"},{"location":"reference/console/#trace","text":"Output text to the console, and also to the latest.log file Syntax: console.trace(String text); Returns: nil Example: function onLoad() console.trace(\"Enabled my incredible mod! Thanks :D\"); end This will show and trace a log message when the mod is enabled :)","title":"trace"},{"location":"reference/draw/","text":"","title":"Draw"},{"location":"reference/editor/","text":"","title":"Editor"},{"location":"reference/font/","text":"","title":"Font"},{"location":"reference/game/","text":"","title":"Game"},{"location":"reference/instance/","text":"Instance Module The instance module allows the interaction with game objects, both level editor and ingame ones.","title":"Instance"},{"location":"reference/instance/#instance-module","text":"The instance module allows the interaction with game objects, both level editor and ingame ones.","title":"Instance Module"},{"location":"reference/level/","text":"","title":"Level"},{"location":"reference/locale/","text":"","title":"Locale"},{"location":"reference/mathf/","text":"","title":"Mathf"},{"location":"reference/menu/","text":"","title":"Menu"},{"location":"reference/mod/","text":"","title":"Mod"},{"location":"reference/network/","text":"","title":"Network"},{"location":"reference/particles/","text":"","title":"Particle"},{"location":"reference/player/","text":"","title":"Player"},{"location":"reference/reflections/","text":"","title":"Reflections"},{"location":"reference/replay/","text":"","title":"Replay"},{"location":"reference/resources/","text":"","title":"Resources"},{"location":"reference/save/","text":"","title":"Save"},{"location":"reference/sfx/","text":"","title":"SFX"},{"location":"reference/string/","text":"","title":"String"},{"location":"reference/view/","text":"","title":"View"}]}